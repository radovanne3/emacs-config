#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+title: Emacs  Configuration
* General settings
** Package System Setup

#+begin_src emacs-lisp
  (defvar native-comp-deferred-compilation-deny-list nil)
  (setq straight-repository-branch "develop")
  ;; Install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (use-package straight
    :custom
    (straight-use-package-by-default t))

#+end_src

** Clean .emacs.d

#+begin_src emacs-lisp

    ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

** File limits

#+BEGIN_SRC emacs-lisp

  (setq gc-cons-thresold (* 50 1000 1000))
  (setq large-file-warning-thresold 100000000)

#+END_SRC

** Startup performance

#+begin_src emacs-lisp

    ;; Profile emacs startup
    (add-hook 'emacs-startup-hook
              (lambda ()
                (message "*** Emacs loaded in %s with %d garbage collections."
                         (format "%.2f seconds"
                                 (float-time
                                  (time-subtract after-init-time before-init-time)))
                         gcs-done)))

  ;; Silence compiler warnings
  (setq comp-async-report-warnings-errors nil)

  ;; DISABLE INITIALIZATION WARNINGS

  (setq warning-minimum-level :emergency)

#+end_src

** Encoding

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

** Basic UI Configuration

Make UI look minimal and modern.

#+begin_src emacs-lisp

      (setq inhibit-startup-message t)
      (setq inhibit-startup-screen t)

      (setq scroll-margin 0
            scroll-conservatively 100000
            scroll-preserve-screen-position 1)   ; Sets normal scrolling behaviour

      (setq scroll-margin 10)     ; Sets scroll margin to keep the cursor/point from getting within a certain distance of the top or bottom of the window

      (setq-default word-wrap t)

      (scroll-bar-mode -1)        ; Disable visible scrollbar
      (tool-bar-mode -1)          ; Disable the toolbar
      (tooltip-mode -1)           ; Disable tooltips

      (menu-bar-mode -1)            ; Disable the menu bar

      (setq display-line-numbers-type 'relative)
      (global-display-line-numbers-mode)

        ;; Disable line numbers for some modes
      (dolist (mode '(org-mode-hook
                      term-mode-hook
                      shell-mode-hook
                      treemacs-mode-hook
                      eshell-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; set transparent background

  ;; (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
  ;; (add-to-list 'default-frame-alist '(alpha . (95 . 95)))

  ;; maximize screan on start

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))


#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code Retina")

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina")

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :weight 'regular)

  ;; Needed if using emacsclient CHECK THIS??
  (add-to-list 'default-frame-alist '(font . "Fira Code Retina"))

#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-evil-setup t))

    (general-create-definer verde/leader-key
      :keymaps '(normal insert visual emacs)
      :prefix "SPC")

    (general-create-definer verde/local-leader-key
      :states '(normal visual)
      :keymaps 'override
      :prefix ",")

  ;; TODO --> SET PREFIX FOR FILES, LSP
  ;; FIGURE OUT HOW TO USE LOCAL LEADER KEY FOR THIS
  (nvmap :prefix "SPC"
         "SPC" '(counsel-M-x :which-key "M-x")
         "." '(find-file :which-key "Find File")
         ;; Buffers
         "b"   '(:ignore t :which-key "buffer")
         "bb" 'ibuffer
         "bk" 'kill-current-buffer
         "bn" 'next-buffer
         "bp" 'previous-buffer
         "bB" '(ibuffer-list-buffers :which-key "List buffers")
         "bK" 'kill-buffer
         ;; Eshell
         "e"   '(:ignore t :which-key "eshell")
         "eh" '(counsel-esh-history :which-key "Eshell history")
         "es" '(eshell :which-key "Eshell")
         "fr" '(counsel-recentf :which-key "Recent files")
         "hrr" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
         ;; Terminal
         "t"   '(:ignore t :which-key "terminal")
         "tm"  'multi-term
         ;; Windows splits
         "w"  '(:ignore t :which-key "window")
         "wc" '(evil-window-delete :which-key "Close window")
         "wn" '(evil-window-new :which-key "New window")
         "wh" '(evil-window-split :which-key "Horizontal split window")
         "wv" '(evil-window-vsplit :which-key "Vertical split window")
         ;; Git
         "g"   '(:ignore t :which-key "git")
         "gs"  'magit-status
         "gd"  'magit-diff-unstaged
         "gc"  'magit-branch-or-checkout
         "gl"   '(:ignore t :which-key "log")
         "glc" 'magit-log-current
         "glf" 'magit-log-buffer-file
         "gb"  'magit-branch
         "gP"  'magit-push-current
         "gp"  'magit-pull-branch
         "gf"  'magit-fetch
         "gF"  'magit-fetch-all
         "gr"  'magit-rebase


         )



  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* UI Configuration
** Dashboard

#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :init
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "With great power comes great responsibility")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 10)
                            (agenda . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (registers . 5)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-one t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

# ** Ivy and Counsel

# [[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

# [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

# #+begin_src emacs-lisp

#   (use-package ivy
#     :diminish
#     :bind (("C-s" . swiper)
#            :map ivy-minibuffer-map
#            ("TAB" . ivy-alt-done)
#            ("C-l" . ivy-alt-done)
#            ("C-j" . ivy-next-line)
#            ("C-k" . ivy-previous-line)
#            :map ivy-switch-buffer-map
#            ("C-k" . ivy-previous-line)
#            ("C-l" . ivy-done)
#            ("C-d" . ivy-switch-buffer-kill)
#            :map ivy-reverse-i-search-map
#            ("C-k" . ivy-previous-line)
#            ("C-d" . ivy-reverse-i-search-kill))
#     :config
#     (ivy-mode 1))

#   (use-package ivy-rich
#     :init
#     (ivy-rich-mode 1))

#   ;; (use-package counsel
#   ;;   :bind (("C-M-j" . 'counsel-switch-buffer)
#   ;;          :map minibuffer-local-map
#   ;;          ("C-r" . 'counsel-minibuffer-history))
#   ;;   :config
#   ;;   (counsel-mode 1))

# #+end_src

** Helpful Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))


  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode t)
  (add-hook 'before-save-hook 'whitespace-cleanup)

#+end_src

** Text Scaling

Zooming In and Out.

#+begin_src emacs-lisp

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

# ** Golden Ratio
# When working with many windows at the same time, each window has a size that is not convenient for editing. golden-ratio helps on this issue by resizing automatically the windows you are working on to the size specified in the “Golden Ratio”.

# #+begin_src emacs-lisp
#   (use-package golden-ratio :ensure t)
#   (golden-ratio-mode 1)

# #+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ⤵")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; (setq org-agenda-files
    ;;       '("~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org"
    ;;         "~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"
    ;;         "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Navigation
** Marginalia

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :general
    (:keymaps 'minibuffer-local-map
              "M-A" 'marginalia-cycle)
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    :init
    (marginalia-mode))

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))

#+end_src

** Vertico

Vertico is a minibuffer interface, that is, it changes the minibuffer looks and how you interact with it.

#+begin_src emacs-lisp

      (use-package vertico
        :demand t                             ; Otherwise won't get loaded immediately
      :straight (vertico :files (:defaults "extensions/*") ; Special recipe to load extensions conveniently
                         :includes (vertico-indexed
                                    vertico-flat
                                    vertico-grid
                                    vertico-mouse
                                    vertico-quick
                                    vertico-buffer
                                    vertico-repeat
                                    vertico-reverse
                                    vertico-directory
                                    vertico-multiform
                                    vertico-unobtrusive
                                    ))

      :bind (:map vertico-map
                  ("C-j" . vertico-next)
                    ("C-k" . vertico-previous)
                    ("C-f" . vertico-exit))
      :general
      (:keymaps '(normal insert visual motion)
                "M-." #'vertico-repeat
       )
      (:keymaps 'vertico-map
                "<tab>" #'vertico-insert ; Set manually otherwise setting `vertico-quick-insert' overrides this
       "<escape>" #'minibuffer-keyboard-quit
       "?" #'minibuffer-completion-help
       "C-M-n" #'vertico-next-group
       "C-M-p" #'vertico-previous-group
       ;; Multiform toggles
       "<backspace>" #'vertico-directory-delete-char
       "C-w" #'vertico-directory-delete-word
       "C-<backspace>" #'vertico-directory-delete-word
       "RET" #'vertico-directory-enter
       "C-i" #'vertico-quick-insert
       "C-o" #'vertico-quick-exit
       "M-o" #'verde/vertico-quick-embark
       "M-G" #'vertico-multiform-grid
       "M-F" #'vertico-multiform-flat
       "M-R" #'vertico-multiform-reverse
       "M-U" #'vertico-multiform-unobtrusive
       "C-l" #'verde/vertico-multiform-flat-toggle
       )
      :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
             (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved
             )
      :custom
      (vertico-count 13)
      (vertico-resize t)
      (vertico-cycle nil)
      ;; Extensions
      (vertico-grid-separator "       ")
      (vertico-grid-lookahead 50)
      (vertico-buffer-display-action '(display-buffer-reuse-window))
      (vertico-multiform-categories
       '((file reverse)
         (consult-grep buffer)
         (consult-location)
         (imenu buffer)
         (library reverse indexed)
         (org-roam-node reverse indexed)
         (t reverse)
         ))
      (vertico-multiform-commands
       '(("flyspell-correct-*" grid reverse)
         (org-refile grid reverse indexed)
         (consult-yank-pop indexed)
         (consult-flycheck)
         (consult-lsp-diagnostics)
         ))
      :init
      (defun verde/vertico-multiform-flat-toggle ()
        "Toggle between flat and reverse."
        (interactive)
        (vertico-multiform--display-toggle 'vertico-flat-mode)
        (if vertico-flat-mode
            (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
          (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))
      (defun verde/vertico-quick-embark (&optional arg)
        "Embark on candidate using quick keys."
        (interactive)
        (when (vertico-quick-jump)
          (embark-act arg)))

      ;; Workaround for problem with `tramp' hostname completions. This overrides
      ;; the completion style specifically for remote files! See
      ;; https://github.com/minad/vertico#tramp-hostname-completion
      (defun verde/basic-remote-try-completion (string table pred point)
        (and (vertico--remote-p string)
             (completion-basic-try-completion string table pred point)))
      (defun verde/basic-remote-all-completions (string table pred point)
        (and (vertico--remote-p string)
             (completion-basic-all-completions string table pred point)))
      (add-to-list 'completion-styles-alist
                   '(basic-remote           ; Name of `completion-style'
                     verde/basic-remote-try-completion verde/basic-remote-all-completions nil))
      :config
      (vertico-mode)
      ;; Extensions
      (vertico-multiform-mode)

      ;; Prefix the current candidate with “» ”. From
      ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
      (advice-add #'vertico--format-candidate :around
                  (lambda (orig cand prefix suffix index _start)
                    (setq cand (funcall orig cand prefix suffix index _start))
                    (concat
                     (if (= vertico--index index)
                         (propertize "» " 'face 'vertico-current)
                       "  ")
                     cand))))

      (use-package savehist
        :init
        (savehist-mode))

#+end_src

** Embark

#+begin_src emacs-lisp

  (use-package embark ;; TODO
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Orderless

Orderless is an alternative and powerful completion style, that is, it is an alternative to Emacs’s basic candidate-filtering capacities.

#+begin_src emacs-lisp

  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)    ; I want to be in control!
    (completion-category-overrides
     '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
                     orderless
                     ))
       ))

    (orderless-component-separator 'orderless-escapable-split-on-space)
    (orderless-matching-styles
     '(orderless-literal
       orderless-prefixes
       orderless-initialism
       orderless-regexp
       ;; orderless-flex
       ;; orderless-strict-leading-initialism
       ;; orderless-strict-initialism
       ;; orderless-strict-full-initialism
       ;; orderless-without-literal          ; Recommended for dispatches instead
       ))
    (orderless-style-dispatchers
     '(prot-orderless-literal-dispatcher
       prot-orderless-strict-initialism-dispatcher
       prot-orderless-flex-dispatcher
       ))
    :init
    (defun orderless--strict-*-initialism (component &optional anchored)
      "Match a COMPONENT as a strict initialism, optionally ANCHORED.
  The characters in COMPONENT must occur in the candidate in that
  order at the beginning of subsequent words comprised of letters.
  Only non-letters can be in between the words that start with the
  initials.

  If ANCHORED is `start' require that the first initial appear in
  the first word of the candidate.  If ANCHORED is `both' require
  that the first and last initials appear in the first and last
  words of the candidate, respectively."
      (orderless--separated-by
       '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)))
       (cl-loop for char across component collect `(seq word-start ,char))
       (when anchored '(seq (group buffer-start) (zero-or-more (not alpha))))
       (when (eq anchored 'both)
         '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)) eol))))

    (defun orderless-strict-initialism (component)
      "Match a COMPONENT as a strict initialism.
  This means the characters in COMPONENT must occur in the
  candidate in that order at the beginning of subsequent words
  comprised of letters.  Only non-letters can be in between the
  words that start with the initials."
      (orderless--strict-*-initialism component))

    (defun prot-orderless-literal-dispatcher (pattern _index _total)
      "Literal style dispatcher using the equals sign as a suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "=" pattern)
        `(orderless-literal . ,(substring pattern 0 -1))))

    (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
      "Leading initialism  dispatcher using the comma suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "," pattern)
        `(orderless-strict-initialism . ,(substring pattern 0 -1))))

    (defun prot-orderless-flex-dispatcher (pattern _index _total)
      "Flex  dispatcher using the tilde suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "." pattern)
        `(orderless-flex . ,(substring pattern 0 -1))))
    )


#+end_src

** Consult
#+begin_src emacs-lisp

  ;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)

#+end_src

* Development
** Languages
*** IDE Features with lsp-mode
**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands
    (lsp lsp-deferred)
    :hook
    ((lsp-mode . (lambda () (setq-local evil-lookup-func #'lsp-describe-thing-at-point)))
     (lsp-mode . lsp-enable-which-key-integration))
    :general
    (verde/leader-key
      :states 'normal
      :keymaps 'lsp-mode-map
     ;; LSP
      "l"   '(:ignore t :which-key "lsp")
     "lgd" '(lsp-find-type-definition :which-key "type definition")
     ;; lsp find
     "ld" '(lsp-find-definition :which-key "definition")
     "lr" '(lsp-find-references :which-key "reference")
     "li" '(lsp-find-implementation :which-key "implementation")
     ;; lsp format
     "lf"  '(:ignore t :which-key "format")
     "lfb" 'lsp-format-buffer
     "lfr" 'lsp-format-region

     "ln"  'lsp-rename
      )
    :init
    (setq lsp-restart 'ignore)
    (setq lsp-eldoc-enable-hover t)
    (setq lsp-enable-file-watchers nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-modeline-diagnostics-enable t)
    (setq lsp-keep-workspace-alive nil)
    (setq lsp-auto-execute-action nil)
    (setq lsp-before-save-edits nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-diagnostics-provider :flycheck)
    )

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook
    ((lsp-mode . lsp-ui-mode)
     ;; (lsp-mode . (lambda () (setq-local evil-goto-definition-functions '(lambda (&rest args) (lsp-ui-peek-find-definitions)))))
     )
    ;; :bind
    ;; (:map lsp-ui-mode-map
    ;;       ([remap lsp-find-references] . lsp-ui-peek-find-references))
    :general
    (verde/local-leader-key
     "h" 'lsp-ui-doc-show
     "H" 'lsp-ui-doc-hide)
    (lsp-ui-peek-mode-map
     :states 'normal
     "C-j" 'lsp-ui-peek--select-next
     "C-k" 'lsp-ui-peek--select-prev)
    (outline-mode-map
     :states 'normal
     "C-j" 'nil
     "C-k" 'nil)
    :init
    (setq lsp-ui-doc-show-with-cursor t)
    (setq lsp-ui-doc-show-with-mouse nil)
    (setq lsp-ui-peek-always-show t)
    (setq lsp-ui-peek-fontify 'always)
    )

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

    (use-package lsp-treemacs
      :after lsp
      :custom
      (lsp-treemacs-theme "doom-colors")
      (treemacs-width 35)
      (treemacs-git-mode 'extended)
      (treemacs-git-display-mode 'treemacs-git-display-mode-git-status)
      (treemacs-show-hidden-files t)
      (treemacs-silent-refresh t)
      (treemacs-silent-filewatch t)
      (treemacs-collapse-dirs 0)
      (treemacs-filewatch-mode 'deferred)
      :bind
      (:map lsp-mode-map ;; fix this
            ("M-p" . treemacs)
            ("M-s" . lsp-treemacs-symbols)))
#+end_src

# **** lsp-ivy

# [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

# Try these commands with =M-x=:

# - =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
# - =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

# #+begin_src emacs-lisp

#   (use-package lsp-ivy)

# #+end_src

*** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Clojure

#+begin_src emacs-lisp

  (use-package clojure-mode
    :mode "\\.clj$"
    :init
    (setq clojure-align-forms-automatically t)
    :hook
    ((clojure-mode clojurescript-mode)
     . (lambda ()
         (setq-local lsp-enable-indentation nil ; cider indentation
                     lsp-enable-completion-at-point nil ; cider completion
                     )
         (lsp-deferred))))

  (use-package cider
    :hook ((cider-repl-mode . evil-normalize-keymaps)
           (cider-mode . (lambda ()
                           (setq-local evil-lookup-func #'cider-doc)))
           (cider-mode . eldoc-mode))
    :general
    (verde/local-leader-key
     :states 'normal
     :keymaps 'clojure-mode-map
     ;; connect
     "c"   '(:ignore t :which-key "cider connect/jack-in")
     "cc" '(cider-connect-clj :wk "connect")
     "cC" '(cider-connect-cljs :wk "connect (cljs)")
     "cj" '(cider-jack-in :wk "jack in")
     "cJ" '(cider-jack-in-cljs :wk "jack in (cljs)")
     ;; debug
     "d"   '(:ignore t :which-key "debug")
     "dd" 'cider-debug-defun-at-point
     ;; evaluation
     "e"   '(:ignore t :which-key "eval")
     "eb" 'cider-eval-buffer
     "el" 'cider-eval-last-sexp
     "eL" 'cider-pprint-eval-last-sexp-to-comment
     "ed" '(cider-eval-defun-at-point :wk "defun")
     "eD" 'cider-pprint-eval-defun-to-comment
     "h" 'cider-clojuredocs-web
     "K" 'cider-doc
     "q" '(cider-quit :qk "quit")
     )
    (verde/local-leader-key
     :keymaps 'clojure-mode-map
     :states 'visual
     "e" 'cider-eval-region)
    :init
    (setq nrepl-hide-special-buffers t)
    (setq nrepl-sync-request-timeout nil)
    (setq cider-repl-display-help-banner nil))

#+end_src

*** Python

#+begin_src emacs-lisp

    (use-package python-mode
      :hook
      ((envrc-mode . (lambda ()
                       (when (executable-find "ipython")
                         (setq python-shell-interpreter (executable-find "ipython"))))))
      :general
      (verde/local-leader-key
       :keymaps 'python-mode-map
       "'" 'run-python)
      (python-mode-map
       :states 'normal
       "gz" nil
       "C-j" nil)
      (python-mode-map
       :states 'insert
       "TAB" 'verde/py-indent-or-complete)
      :init
      (setq python-indent-offset 0)
      (defun verde/py-indent-or-complete ()
        (interactive "*")
        (window-configuration-to-register py--windows-config-register)
        (cond ((use-region-p)
               (py-indent-region (region-beginning) (region-end)))
              ((or (bolp)
                   (member (char-before) (list 9 10 12 13 32 ?:  ;; ([{
                                               ?\) ?\] ?\}))
                   ;; (not (looking-at "[ \t]*$"))
                   )
               (py-indent-line))
              ((comint-check-proc (current-buffer))
               (ignore-errors (completion-at-point)))
              (t
               (completion-at-point))))
      :config
      (setq python-shell-interpreter-args "-i --simple-prompt --no-color-info"
            python-shell-prompt-regexp "In \\[[0-9]+\\]: "
            python-shell-prompt-block-regexp "\\.\\.\\.\\.: "
            python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
            python-shell-completion-setup-code
            "from IPython.core.completerlib import module_completion"
            python-shell-completion-string-code
            "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
      )

  (use-package lsp-pyright
    :init
    (setq lsp-pyright-typechecking-mode "basic") ;; too much noise in "real" projects
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))


  (use-package python-pytest
    :general
    (verde/local-leader-key
     :keymaps 'python-mode-map
     "t" '(:ignore t :wk "test")
     "t d" '(python-pytest-dispatch :wk "dispatch")
     "t f" '(python-pytest-file :wk "file")
     "t t" '(python-pytest-function :wk "function"))
    :init
    (setq python-pytest-arguments '("--color" "--failed-first"))
    (defun verde/pytest-use-venv (orig-fun &rest args)
      (if-let ((python-pytest-executable (executable-find "pytest")))
          (apply orig-fun args)
        (apply orig-fun args)))
    :config
    (advice-add 'python-pytest--run :around #'verde/pytest-use-venv)
    )


  (use-package flycheck
    :hook ((lsp-mode . flycheck-mode)
           (envrc-mode . (lambda ()
                           (setq flycheck-python-flake8-executable (executable-find "python"))
                           (setq flycheck-checker 'python-flake8)
                           (setq flycheck-flake8rc ".flake8")
                           )))
    :init
    (setq flycheck-indication-mode 'right-fringe)
    ;; only check on save
    (setq flycheck-check-syntax-automatically '(mode-enabled save))
    )

  (use-package blacken
    :general
    (verde/local-leader-key
     :keymaps 'python-mode-map
     "=" '(blacken-buffer :wk "format"))
    )

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge)

  (use-package git-gutter-fringe
    :diminish
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 0.5)
    (setq git-gutter:modified-sign "~")
    (setq git-gutter:added-sign "+")
    (setq git-gutter:deleted-sign "-")
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral"))

#+end_src

** Git TimeMachine

#+begin_src emacs-lisp

  (use-package git-timemachine) ;; do I need this?

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Paredit

#+begin_src emacs-lisp

  (use-package paredit
    :ensure t
    :init
    (add-hook 'clojure-mode-hook #'enable-paredit-mode)
    (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
    :config
    (show-paren-mode t)
    :bind (("M-[" . paredit-wrap-square)
           ("M-{" . paredit-wrap-curly))
    :diminish nil)

#+end_src

** Evil collection

Provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil)

#+end_src

** Surround

This package emulates surround.vim by Tim Pope. The functionality is wrapped into a minor mode.

#+begin_src emacs-lisp

  (use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

#+end_src

** Terminal
Install multi-term and bind it to C-c t


#+begin_src emacs-lisp

  (use-package multi-term)

#+end_src
